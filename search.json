[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Fundamentals in Programming",
    "section": "",
    "text": "OverviewAuthors\n\n\nThis short course provides some additional background on programming-related topics. This is intended as a practical application of some programming techniques, such as the use of loops, conditional statements and writing functions.\n\n\n\n\n\n\nLearning Objectives\n\n\n\n\nUnderstand and be able to apply loops\nBe able to use conditional statements\nUnderstand the basic components of a function\n\n\n\n\nTarget Audience\nPeople who require the use of repetitive tasks in their analyses.\n\n\nPrerequisites\nWe expect participants to have a basic working knowledge of either R or Python.\n\n\n\nAbout the authors:\n\nMartin van Rongen \nAffiliation: Bioinformatics Training Facility, University of Cambridge\nRoles: writing - review & editing; conceptualisation; coding\nMatt Castle Affiliation: Bioinformatics Training Facility, University of Cambridge\nRoles: writing - original draft; conceptualisation; coding"
  },
  {
    "objectID": "setup.html",
    "href": "setup.html",
    "title": "Setup",
    "section": "",
    "text": "Workshop Attendees\n\n\n\nIf you are attending one of our workshops, we will provide a training environment with all of the required software and data.\nIf you want to setup your own computer to run the analysis demonstrated on this course, you can follow the instructions below."
  },
  {
    "objectID": "setup.html#r-and-rstudio",
    "href": "setup.html#r-and-rstudio",
    "title": "Setup",
    "section": "R and RStudio",
    "text": "R and RStudio\n\n\nWindows\nDownload and install all these using default options:\n\nR\nRTools\nRStudio\n\n\n\nMac OS\nDownload and install all these using default options:\n\nR\nRStudio\n\n\n\nLinux\n\nGo to the R installation folder and look at the instructions for your distribution.\nDownload the RStudio installer for your distribution and install it using your package manager."
  },
  {
    "objectID": "setup.html#visual-studio-code",
    "href": "setup.html#visual-studio-code",
    "title": "Setup",
    "section": "Visual Studio Code",
    "text": "Visual Studio Code\n\nWindowsMac OSLinux (Ubuntu)\n\n\n\nGo to the Visual Studio Code download page and download the installer for your operating system. Double-click the downloaded file to install the software, accepting all the default options.\nAfter completing the installation, go to your Windows Menu, search for “Visual Studio Code” and launch the application.\nGo to “File > Preferences > Settings”, then select “Text Editor > Files” on the drop-down menu on the left. Scroll down to the section named “EOL” and choose “\\n” (this will ensure that the files you edit on Windows are compatible with the Linux operating system).\n\n\n\n\nGo to the Visual Studio Code download page and download the installer for Mac.\nGo to the Downloads folder and double-click the file you just downloaded to extract the application. Drag-and-drop the “Visual Studio Code” file to your “Applications” folder.\nYou can now open the installed application to check that it was installed successfully (the first time you launch the application you will get a warning that this is an application downloaded from the internet - you can go ahead and click “Open”).\n\n\n\n\nGo to the Visual Studio Code download page and download the installer for your Linux distribution. Install the package using your system’s installer."
  },
  {
    "objectID": "materials/extended-exercise.html#libraries-and-functions",
    "href": "materials/extended-exercise.html#libraries-and-functions",
    "title": "Extended exercise",
    "section": "Libraries and functions",
    "text": "Libraries and functions\n\n\n\n\n\n\nClick to expand\n\n\n\n\n\n\nRPython\n\n\n\nLibraries\n\nlibrary(tidyverse)\nlibrary(janitor)\n\n\n\nFunctions\n\n\n\n\nLibraries\n\n\nFunctions"
  },
  {
    "objectID": "materials/extended-exercise.html#overview",
    "href": "materials/extended-exercise.html#overview",
    "title": "Extended exercise",
    "section": "Overview",
    "text": "Overview\nThis practical consists of an extended exercise that will allow you to practice and utilise all of the different skills that we have introduced over the Data Analysis course. It is deliberately designed to replicate a real and realistic piece of work that you might be expected to undertake within your lab. There are two slightly different versions of this exercise:\n• The first utilises data that already in a tidy format and merely requires you to work out a way of combining everything using the tools we’ve already covered.\n• The second starts with the data stored in a common, but distinctly non-tidy format, and will require much more effort to work out a way to get the data into a usable format. It will require use of functions that we haven’t explicitly introduced and so you will have to use Google to find out what they are and how they work. This is a much more realistic situation, and one that you will encounter in your future work and as such I strongly recommend that you at least have a go at this version. The versions only differ in the skills you require to get the data into R in the first place and both versions ask you to perform the same analyses on the datasets at the end."
  },
  {
    "objectID": "materials/extended-exercise.html#introduction-to-exercise",
    "href": "materials/extended-exercise.html#introduction-to-exercise",
    "title": "Extended exercise",
    "section": "Introduction to exercise",
    "text": "Introduction to exercise\nAn experiment investigated the effect of diet on the early growth of chicks. A number of chicks were fed one of four different diets and their weight (in g) was measured at birth and then at every other day until day 20. A final measurement was made on day 21."
  },
  {
    "objectID": "materials/extended-exercise.html#easy-option",
    "href": "materials/extended-exercise.html#easy-option",
    "title": "Extended exercise",
    "section": "Easy option",
    "text": "Easy option\nThe data are stored in text files in a directory entitled data/ext-excercise-easy. There is one text file for each chick. The format of the data in each text file is the same:\n• each file contains a tidy table with four columns: ID, Diet, Days, Weight Create a function that that reads in the data from a single file and stores it in a single R object. The function should: • Accept a single argument (a character string of the file location)\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nRPython\n\n\n\nOption 1 - tidyverse based\n\n# load libraries\nlibrary(tidyverse)\n\nCreate a function that reads in the data:\n\n# create read function ----\nread_chicks <- function(file){\n\n    # Read the data in the file\n    chick_data <- read_delim(file, show_col_types = FALSE)\n\n    # Get the chick ID from the file name\n    chick_name <- file %>% basename() %>% str_remove(\".txt\")\n\n    # Add data to our table\n    chick_data <- chick_data %>%\n        mutate(chick_name = chick_name)\n\n    # Return the tidy data\n    return(chick_data)\n}\n\nWe can check that it’s working:\n\nread_chicks(\"data/ext-exercise-easy/Chick_1.txt\")\n\n# A tibble: 12 × 5\n   weight  Time Chick  Diet chick_name\n    <dbl> <dbl> <dbl> <dbl> <chr>     \n 1     42     0     1     1 Chick_1   \n 2     51     2     1     1 Chick_1   \n 3     59     4     1     1 Chick_1   \n 4     64     6     1     1 Chick_1   \n 5     76     8     1     1 Chick_1   \n 6     93    10     1     1 Chick_1   \n 7    106    12     1     1 Chick_1   \n 8    125    14     1     1 Chick_1   \n 9    149    16     1     1 Chick_1   \n10    171    18     1     1 Chick_1   \n11    199    20     1     1 Chick_1   \n12    205    21     1     1 Chick_1   \n\n\nNext, we need to get all the file names:\n\nfile_list_easy <- list.files(\"data/ext-exercise-easy/\", full.names = TRUE)\n\nWe can check the output with:\n\nhead(file_list_easy)\n\n[1] \"data/ext-exercise-easy//Chick_1.txt\" \n[2] \"data/ext-exercise-easy//Chick_10.txt\"\n[3] \"data/ext-exercise-easy//Chick_11.txt\"\n[4] \"data/ext-exercise-easy//Chick_12.txt\"\n[5] \"data/ext-exercise-easy//Chick_13.txt\"\n[6] \"data/ext-exercise-easy//Chick_14.txt\"\n\n\nLastly, we need to combine the two: for each file in the file_list we need to apply the read_chicks() function.\n\n# create an empty vector list that can hold our data\nchicks <- vector(\"list\", length = length(file_list_easy))\n\n# loop through the files and add to the list\nfor(i in seq_along(file_list_easy)){\n    chicks[[i]] <- read_chicks(file_list_easy[i])\n}\n\nWe can inspect the chicks object:\n\nhead(chicks)\n\n[[1]]\n# A tibble: 12 × 5\n   weight  Time Chick  Diet chick_name\n    <dbl> <dbl> <dbl> <dbl> <chr>     \n 1     42     0     1     1 Chick_1   \n 2     51     2     1     1 Chick_1   \n 3     59     4     1     1 Chick_1   \n 4     64     6     1     1 Chick_1   \n 5     76     8     1     1 Chick_1   \n 6     93    10     1     1 Chick_1   \n 7    106    12     1     1 Chick_1   \n 8    125    14     1     1 Chick_1   \n 9    149    16     1     1 Chick_1   \n10    171    18     1     1 Chick_1   \n11    199    20     1     1 Chick_1   \n12    205    21     1     1 Chick_1   \n\n[[2]]\n# A tibble: 12 × 5\n   weight  Time Chick  Diet chick_name\n    <dbl> <dbl> <dbl> <dbl> <chr>     \n 1     41     0    10     1 Chick_10  \n 2     44     2    10     1 Chick_10  \n 3     52     4    10     1 Chick_10  \n 4     63     6    10     1 Chick_10  \n 5     74     8    10     1 Chick_10  \n 6     81    10    10     1 Chick_10  \n 7     89    12    10     1 Chick_10  \n 8     96    14    10     1 Chick_10  \n 9    101    16    10     1 Chick_10  \n10    112    18    10     1 Chick_10  \n11    120    20    10     1 Chick_10  \n12    124    21    10     1 Chick_10  \n\n[[3]]\n# A tibble: 12 × 5\n   weight  Time Chick  Diet chick_name\n    <dbl> <dbl> <dbl> <dbl> <chr>     \n 1     43     0    11     1 Chick_11  \n 2     51     2    11     1 Chick_11  \n 3     63     4    11     1 Chick_11  \n 4     84     6    11     1 Chick_11  \n 5    112     8    11     1 Chick_11  \n 6    139    10    11     1 Chick_11  \n 7    168    12    11     1 Chick_11  \n 8    177    14    11     1 Chick_11  \n 9    182    16    11     1 Chick_11  \n10    184    18    11     1 Chick_11  \n11    181    20    11     1 Chick_11  \n12    175    21    11     1 Chick_11  \n\n[[4]]\n# A tibble: 12 × 5\n   weight  Time Chick  Diet chick_name\n    <dbl> <dbl> <dbl> <dbl> <chr>     \n 1     41     0    12     1 Chick_12  \n 2     49     2    12     1 Chick_12  \n 3     56     4    12     1 Chick_12  \n 4     62     6    12     1 Chick_12  \n 5     72     8    12     1 Chick_12  \n 6     88    10    12     1 Chick_12  \n 7    119    12    12     1 Chick_12  \n 8    135    14    12     1 Chick_12  \n 9    162    16    12     1 Chick_12  \n10    185    18    12     1 Chick_12  \n11    195    20    12     1 Chick_12  \n12    205    21    12     1 Chick_12  \n\n[[5]]\n# A tibble: 12 × 5\n   weight  Time Chick  Diet chick_name\n    <dbl> <dbl> <dbl> <dbl> <chr>     \n 1     41     0    13     1 Chick_13  \n 2     48     2    13     1 Chick_13  \n 3     53     4    13     1 Chick_13  \n 4     60     6    13     1 Chick_13  \n 5     65     8    13     1 Chick_13  \n 6     67    10    13     1 Chick_13  \n 7     71    12    13     1 Chick_13  \n 8     70    14    13     1 Chick_13  \n 9     71    16    13     1 Chick_13  \n10     81    18    13     1 Chick_13  \n11     91    20    13     1 Chick_13  \n12     96    21    13     1 Chick_13  \n\n[[6]]\n# A tibble: 12 × 5\n   weight  Time Chick  Diet chick_name\n    <dbl> <dbl> <dbl> <dbl> <chr>     \n 1     41     0    14     1 Chick_14  \n 2     49     2    14     1 Chick_14  \n 3     62     4    14     1 Chick_14  \n 4     79     6    14     1 Chick_14  \n 5    101     8    14     1 Chick_14  \n 6    128    10    14     1 Chick_14  \n 7    164    12    14     1 Chick_14  \n 8    192    14    14     1 Chick_14  \n 9    227    16    14     1 Chick_14  \n10    248    18    14     1 Chick_14  \n11    259    20    14     1 Chick_14  \n12    266    21    14     1 Chick_14  \n\n\nThis gives us a list with 50 data frames. We can combine these into one large table by doing the following:\n\nall_chicks <- bind_rows(chicks)\n\nWe can inspect the object:\n\nhead(all_chicks)\n\n# A tibble: 6 × 5\n  weight  Time Chick  Diet chick_name\n   <dbl> <dbl> <dbl> <dbl> <chr>     \n1     42     0     1     1 Chick_1   \n2     51     2     1     1 Chick_1   \n3     59     4     1     1 Chick_1   \n4     64     6     1     1 Chick_1   \n5     76     8     1     1 Chick_1   \n6     93    10     1     1 Chick_1   \n\n\nTo finalise things, we tidy up some of the column names. We can do this manually (with rename() for example) or just use janitor::clean_names() function (you will have to install and load the janitor package for this). We also reorder the columns:\n\nlibrary(janitor)\n\n\nAttaching package: 'janitor'\n\n\nThe following object is masked from 'package:rstatix':\n\n    make_clean_names\n\n\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n\nall_chicks %>% \n    clean_names()\n\n# A tibble: 578 × 5\n   weight  time chick  diet chick_name\n    <dbl> <dbl> <dbl> <dbl> <chr>     \n 1     42     0     1     1 Chick_1   \n 2     51     2     1     1 Chick_1   \n 3     59     4     1     1 Chick_1   \n 4     64     6     1     1 Chick_1   \n 5     76     8     1     1 Chick_1   \n 6     93    10     1     1 Chick_1   \n 7    106    12     1     1 Chick_1   \n 8    125    14     1     1 Chick_1   \n 9    149    16     1     1 Chick_1   \n10    171    18     1     1 Chick_1   \n# … with 568 more rows\n\n\nThat looks better, so let’s update our object:\n\nall_chicks <- all_chicks %>% \n    clean_names()"
  },
  {
    "objectID": "materials/extended-exercise.html#challenging-option",
    "href": "materials/extended-exercise.html#challenging-option",
    "title": "Extended exercise",
    "section": "Challenging option",
    "text": "Challenging option\nThe data are stored in text files in a directory entitled data/ext-excerise-chal. There is one text file for each chick. The format of the data in each text file is the same:\n• each file contains information on an individual chick, with Diet, Day and Weight information. The ID of the chick is encoded in the file name. Create a function that that reads in the data from a single file and stores it in a single R object. The function should: • Accept a single argument (a character string of the file location)\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nRPython\n\n\n\nOption 1 - tidyverse based\nFirst, if we open one of the files then we can see that the files are composed of the following:\n\nDiet; e.g. Diet: 1\nempty line\na tidy table with Day, Weight columns, space separated\n\nThe chick ID is encoded in the filename, so we need to extract that information as well.\nFirst, we create a function that reads in the data:\n\n# create read function ----\nread_chicks <- function(file){\n\n    # Read the data in the file\n    chick_data <- read_delim(file, delim = \" \", skip = 1)\n\n    # Get the diet information\n    chick_diet <- read_delim(file, delim = \" \",\n               col_names = FALSE,\n               n_max = 1) %>%\n        mutate(diet = parse_number(as.character(.))) %>%\n        select(diet) %>% pull()\n\n    # Get the chick ID from the file name\n    chick_name <- file %>% basename() %>% str_remove(\".txt\")\n\n    # Add data to our table\n    chick_data <- chick_data %>%\n        mutate(chick_name = chick_name,\n               chick_diet = chick_diet)\n\n    # Return the tidy data\n    return(chick_data)\n}\n\nWe can see if this works:\n\nread_chicks(\"data/ext-exercise-chal/Chick_1.txt\")\n\nRows: 12 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \" \"\ndbl (2): Day, Weight\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 1 Columns: 1\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \" \"\nchr (1): X1\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n# A tibble: 12 × 4\n     Day Weight chick_name chick_diet\n   <dbl>  <dbl> <chr>           <dbl>\n 1     0     42 Chick_1             1\n 2     2     51 Chick_1             1\n 3     4     59 Chick_1             1\n 4     6     64 Chick_1             1\n 5     8     76 Chick_1             1\n 6    10     93 Chick_1             1\n 7    12    106 Chick_1             1\n 8    14    125 Chick_1             1\n 9    16    149 Chick_1             1\n10    18    171 Chick_1             1\n11    20    199 Chick_1             1\n12    21    205 Chick_1             1\n\n\nAll good. Next, we need to get the list of files that we want to loop over:\n\nfile_list_chal <- list.files(\"data/ext-exercise-chal/\",\n                             full.names = TRUE)\n\nThen we combine the two, we loop over each item in the file list, applying the read_chicks() function we created:\n\nchal_chicks <- vector(\"list\", length = length(file_list_chal))\n\n# loop through the files and add to the list\nfor(i in seq_along(file_list_chal)){\n    chal_chicks[[i]] <- read_chicks(file_list_chal[i])\n}\n\nLastly, we combine the 50 lists into one large data frame:\n\nall_chicks <- bind_rows(chal_chicks)\n\nWe can inspect the object as follows:\n\nhead(all_chicks)\n\n# A tibble: 6 × 4\n    Day Weight chick_name chick_diet\n  <dbl>  <dbl> <chr>           <dbl>\n1     0     42 Chick_1             1\n2     2     51 Chick_1             1\n3     4     59 Chick_1             1\n4     6     64 Chick_1             1\n5     8     76 Chick_1             1\n6    10     93 Chick_1             1\n\n\nAgain, to finalise things, we tidy up some of the column names. We can do this manually (with rename() for example) or just use janitor::clean_names() function (you will have to install and load the janitor package for this). We also reorder the columns:\n\nlibrary(janitor)\n\nall_chicks <- all_chicks %>% \n    clean_names()\n\n\n\nOption 2 - tidyverse based\nGet all the file names:\n\nlist_of_files <- list.files(\"data/ext-exercise-chal/\",\n                            full.names = TRUE)\n\nCreate a table that can hold all the information in the correct format:\n\nall_chicks <- tibble(\n  Day = as.numeric(),\n  Weight = as.numeric(),\n  chick_id = as.character(),\n  diet = as.numeric()\n)\n\nFor each file in list_of_files, do the following:\n\nread the data\nget the chick ID\nget the diet info\ncreate a table containing the individual data\nmerge that with the existing data\n\n\nfor(i in list_of_files){\n  file <- i\n\n  # 1: read the data\n  chick <- read_delim(file, skip = 2)\n  \n  # 2: get the chick ID\n  chick_id <-  file %>% \n    basename() %>% \n    str_remove(\".txt\")\n  \n  # 3: get the diet info\n  diet <- read.table(file, nrows = 1) %>%\n    mutate(diet = str_remove(V1, \"Diet:\")) %>% \n    select(-V1) %>%\n    pull() %>%\n    as.numeric()\n  \n  # 4: create a table containing the individual data\n  chick <- chick %>% \n    mutate(chick_id = chick_id,\n           diet = diet)\n  \n  # 5. merge that with the existing data\n  all_chicks <- bind_rows(all_chicks, chick)\n  \n}\n\n\nhead(all_chicks)\n\n# A tibble: 6 × 4\n    Day Weight chick_id  diet\n  <dbl>  <dbl> <chr>    <dbl>\n1     0     42 Chick_1      1\n2     2     51 Chick_1      1\n3     4     59 Chick_1      1\n4     6     64 Chick_1      1\n5     8     76 Chick_1      1\n6    10     93 Chick_1      1\n\n\nAgain, to finalise things, we tidy up some of the column names. We can do this manually (with rename() for example) or just use janitor::clean_names() function (you will have to install and load the janitor package for this). We also reorder the columns:\n\nlibrary(janitor)\n\nall_chicks <- all_chicks %>% \n    clean_names() %>% \n    select(chick_id, diet, day, weight)\n\n\n\nOption 3 - base R based\nWe can following the same steps if we wanted to only use base R. We would just have to extract the data slightly differently. For example, testing this on the first file:\n\ndiet_data <- read.table(\"data/ext-exercise-chal/Chick_1.txt\",\n                        nrows = 1)\n\n\nhead(diet_data)\n\n      V1\n1 Diet:1\n\n\nWe could extract the diet information as follows:\n\ndiet <- as.numeric(unlist(strsplit(diet_data$V1, split = \"Diet:\"))[2])\n\n\ndiet\n\n[1] 1\n\n\nThe rest of the workflow is then the same as for Option 2 - tidyverse based."
  },
  {
    "objectID": "materials/extended-exercise.html#data-exploration-and-querying",
    "href": "materials/extended-exercise.html#data-exploration-and-querying",
    "title": "Extended exercise",
    "section": "Data exploration and querying",
    "text": "Data exploration and querying\nNow that we have a complete data set, we can actually use the data and answer some questions.\nLet’s assume that we stored our data in an object called all_chicks, with the following columns:\n\nchick_id, character column with chick ID\ndiet, numeric column with diet type\nday, numeric column with day of experiment\nweight, numeric column with weight measurement\n\nFirst, we perform a couple of sanity checks:\n\nRPython\n\n\nLet’s look at the structure our data:\n\nall_chicks %>% head()\n\n# A tibble: 6 × 4\n  chick_id  diet   day weight\n  <chr>    <dbl> <dbl>  <dbl>\n1 Chick_1      1     0     42\n2 Chick_1      1     2     51\n3 Chick_1      1     4     59\n4 Chick_1      1     6     64\n5 Chick_1      1     8     76\n6 Chick_1      1    10     93\n\n\nThat looks good.\nWe are expecting data for 50 chicks, so let’s check that:\n\nall_chicks %>%\n  distinct(chick_id) %>% \n  count()\n\n# A tibble: 1 × 1\n      n\n  <int>\n1    50\n\n\nHouston, we have 50 chicks!\nNext, how many discrete days do we have in our data?\n\n# how many days are in the data\nall_chicks %>% \n  distinct(day)\n\n# A tibble: 12 × 1\n     day\n   <dbl>\n 1     0\n 2     2\n 3     4\n 4     6\n 5     8\n 6    10\n 7    12\n 8    14\n 9    16\n10    18\n11    20\n12    21\n\n\nTurns out that there are 12 time points, almost in intervals of 2 days…"
  },
  {
    "objectID": "materials/extended-exercise.html#exercise-surviving-chicks",
    "href": "materials/extended-exercise.html#exercise-surviving-chicks",
    "title": "Extended exercise",
    "section": "Exercise: surviving chicks",
    "text": "Exercise: surviving chicks\nHow many chicks died before the end of the experiment? Create a separate data frame called survived_chicks that only includes the data from surviving chicks.\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nRPython\n\n\nTo determine which chicks survived, we need to check on a chick-by-chick basis it survived to the maximum duration of the experiment.\nIn this case, the experiment runs until 21 days, so one way we can tackle this is by creating a new column that contains information on it’s survival status (TRUE or FALSE):\n\nsurvived_chicks <- all_chicks %>% \n  # look on a chick-by-chick basis\n  group_by(chick_id) %>% \n  # create a new column `survived`\n  # if there is a measurement in day 21, state TRUE\n  # otherwise FALSE\n  mutate(survived = if_else(max(day) == 21, TRUE, FALSE)) %>% \n  # filter out the poor chicks that didn't make it\n  filter(survived == TRUE) %>% \n  # remove grouping\n  ungroup()\n\nRight, let’s see how many chicks made it:\n\nsurvived_chicks %>% \n  # get each unique chick\n  distinct(chick_id) %>% \n  count()\n\n# A tibble: 1 × 1\n      n\n  <int>\n1    45\n\n\nGreat, quite a few chicks survived, 45 altogether."
  },
  {
    "objectID": "materials/extended-exercise.html#exercise-data-exploration",
    "href": "materials/extended-exercise.html#exercise-data-exploration",
    "title": "Extended exercise",
    "section": "Exercise: data exploration",
    "text": "Exercise: data exploration\nDo get a better sense of our data, we are going to do some data exploration. I’d like you to do the following:\n\nCalculate the mean increase in weight (end weight minus birth weight) for all of the surviving chicks.\nCalculate the mean increase in weight for each subset of surviving chicks depending on their diet.\nProduce box plots of increases in weight for the surviving chicks on each diet (i.e. four box plots side by side)\nFind the first recorded time that each surviving chick weighed more than 130g and produce a histogram of these times. (Remove from the analysis any chicks that didn’t ever make this weight)\nProduce a line plot which shows the weight of each chick against time. Colour the lines differently depending on the diet of each chick.\nCalculate an average growth curve for each diet (i.e. calculate the average of the weights of each chick at each time point) and produce a single plot showing the four average growth curves.\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nRPython\n\n\n\nmean increase in weight surviving chicks\n\n\nsurvived_chicks %>% \n  group_by(chick_id) %>% \n  summarise(mean_weight_increase =\n              mean(max(weight - min(weight)))) %>% \n  ungroup()\n\n# A tibble: 45 × 2\n   chick_id mean_weight_increase\n   <chr>                   <dbl>\n 1 Chick_1                   163\n 2 Chick_10                   83\n 3 Chick_11                  141\n 4 Chick_12                  164\n 5 Chick_13                   55\n 6 Chick_14                  225\n 7 Chick_17                  100\n 8 Chick_19                  114\n 9 Chick_2                   175\n10 Chick_20                   76\n# … with 35 more rows\n\n\n\nmean weight increase surviving chick by diet\n\n\nsurvived_chicks %>% \n  group_by(chick_id, diet) %>% \n  # get average weight increase by chick\n  summarise(mean_weight_increase =\n              mean(max(weight - min(weight)))) %>% \n  # group by data\n  group_by(diet) %>% \n  # calculate the average increase across the diets\n  summarise(increase_by_diet = mean(mean_weight_increase)) %>% \n  ungroup()\n\n`summarise()` has grouped output by 'chick_id'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 4 × 2\n   diet increase_by_diet\n  <dbl>            <dbl>\n1     1             138.\n2     2             175.\n3     3             231.\n4     4             198.\n\n\n\nbox plots of increases in weight for the surviving chicks on each diet (i.e. four box plots side by side)\n\nThere are multiple ways of doing this, but I’m using the pipe here to start with the original survived chicks data and work from there. Note that the diet column is actually numerical, so to plot the diets as a group, we need to either specify the grouping in ggplot() with group = diet or convert the x-values to a factor with x = factor(diet)\n\nsurvived_chicks %>% \n  group_by(chick_id, diet) %>% \n  # get average weight increase by chick\n  summarise(mean_weight_increase =\n              mean(max(weight - min(weight)))) %>% \n  ungroup() %>% \n  ggplot(aes(x = diet, y = mean_weight_increase,\n             group = diet)) +\n  geom_boxplot()\n\n`summarise()` has grouped output by 'chick_id'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\nFind the first recorded time that each surviving chick weighed more than 130g and produce a histogram of these times. (Remove from the analysis any chicks that didn’t ever make this weight)\n\nAgain, there are multiple ways of doing this, but here we go:\n\nsurvived_chicks %>% \n  # perform these next steps on a\n  # chick-by-chick basis\n  group_by(chick_id) %>%\n  # filter out the data where\n  # weight > 130\n  filter(weight > 130) %>% \n  # arrange by day, so that the first day\n  # where weight > 130 is on top\n  arrange(day) %>% \n  # slice the data so only the first\n  # value per chick_id is kept\n  slice(1) %>% \n  ungroup() %>% \n  # plot our data\n  ggplot(aes(x = day)) +\n  # change the binwidth to 1, so\n  # we get the counts per day\n  geom_histogram(binwidth = 1)\n\n\n\n\n\nline plot of weight over time for each chick, coloured by diet\n\n\nggplot(survived_chicks,\n       aes(x = day, y = weight, colour = factor(diet))) +\n  geom_line(aes(group = chick_id))\n\n\n\n\n\naverage growth curve for each diet\n\n\nsurvived_chicks %>% \n  mutate(diet = factor(diet)) %>% \n  group_by(diet, day) %>% \n  summarise(mean_weight = mean(weight)) %>% \n  ungroup() %>% \n  ggplot(aes(x = day, y = mean_weight,\n             colour = diet, group = diet)) +\n  geom_line()\n\n`summarise()` has grouped output by 'diet'. You can override using the\n`.groups` argument."
  },
  {
    "objectID": "materials/extended-exercise.html#exercise-data-manipulation",
    "href": "materials/extended-exercise.html#exercise-data-manipulation",
    "title": "Extended exercise",
    "section": "Exercise: data manipulation",
    "text": "Exercise: data manipulation\nSometimes it’s useful to save some of these operations into a new data frame. To practice this, we are going to do the following:\nConstruct a data frame with 6 columns and write it to a text file.\n\nThe first column should contain the original times.\nThe second column should contain the mean weights of all of the chicks on all diets (who survived).\nThe third through sixth columns should contain average weights of the chick on each diet.\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nRPython\n\n\nThere are different ways of approaching this. Here I am calculating the average weight for each time point. Then I calculate the average weight per diet. Lastly, I combine that information.\n\nweight_per_day <- survived_chicks %>% \n  group_by(day) %>% \n  summarise(mean_weight = mean(weight)) %>% \n  ungroup()\n\nhead(weight_per_day)\n\n# A tibble: 6 × 2\n    day mean_weight\n  <dbl>       <dbl>\n1     0        41.1\n2     2        49.6\n3     4        60.2\n4     6        74.9\n5     8        92.4\n6    10       110. \n\n\n\nweight_per_diet <- survived_chicks %>% \n  group_by(day, diet) %>% \n  summarise(mean_weight = mean(weight)) %>% \n  ungroup()\n\n`summarise()` has grouped output by 'day'. You can override using the `.groups`\nargument.\n\nhead(weight_per_diet)\n\n# A tibble: 6 × 3\n    day  diet mean_weight\n  <dbl> <dbl>       <dbl>\n1     0     1        41.6\n2     0     2        40.7\n3     0     3        40.8\n4     0     4        40.9\n5     2     1        47.9\n6     2     2        49.4\n\n\nWe need to pivot the weight_per_diet values. We also add a prefix to the names, with names_prefix = \"diet_\", so that our column names do not contain just a number.\n\nweight_per_diet_wide <- weight_per_diet %>% \n  pivot_wider(names_from = diet,\n              values_from = mean_weight,\n              names_prefix = \"diet_\")\n\nhead(weight_per_diet_wide)\n\n# A tibble: 6 × 5\n    day diet_1 diet_2 diet_3 diet_4\n  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>\n1     0   41.6   40.7   40.8   40.9\n2     2   47.9   49.4   50.4   51.9\n3     4   56.7   59.8   62.2   64.4\n4     6   67.7   75.4   77.9   83.7\n5     8   81.6   91.7   98.4  106. \n6    10   97.2  108.   117.   127. \n\n\nThat works, so now we can combine this, for example through a join:\n\ncombined_weights <- left_join(weight_per_diet_wide, weight_per_day, by = \"day\")\n\nhead(combined_weights)\n\n# A tibble: 6 × 6\n    day diet_1 diet_2 diet_3 diet_4 mean_weight\n  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>       <dbl>\n1     0   41.6   40.7   40.8   40.9        41.1\n2     2   47.9   49.4   50.4   51.9        49.6\n3     4   56.7   59.8   62.2   64.4        60.2\n4     6   67.7   75.4   77.9   83.7        74.9\n5     8   81.6   91.7   98.4  106.         92.4\n6    10   97.2  108.   117.   127.        110. \n\n\nWe can write that to file, if we wanted to:\n\nwrite_csv(combined_weights, file = \"data/combined_weights.csv\")"
  },
  {
    "objectID": "materials/extended-exercise.html#key-points",
    "href": "materials/extended-exercise.html#key-points",
    "title": "Extended exercise",
    "section": "Key points",
    "text": "Key points\n\n\n\n\n\n\nNote\n\n\n\n\nWe can use for loops to reiterate over a process\nWe can create our own functions to perform a common set of operations\nCombining data allows us to explore trends in data sets and look for patterns"
  },
  {
    "objectID": "materials/loops.html#libraries-and-functions",
    "href": "materials/loops.html#libraries-and-functions",
    "title": "Loops",
    "section": "Libraries and functions",
    "text": "Libraries and functions\n\n\n\n\n\n\nClick to expand\n\n\n\n\n\n\nRPython\n\n\n\nLibraries\n\n\nFunctions\n\n\n\n\nLibraries\n\n\nFunctions"
  },
  {
    "objectID": "materials/loops.html#overview",
    "href": "materials/loops.html#overview",
    "title": "Loops",
    "section": "Overview",
    "text": "Overview\nOne of the most powerful aspects of computers is their ability to perform tasks repetitively, very quickly. Looping is a key concept in getting a computer to perform a task multiple times. There are two key types of loops:\n\nThe “For” loop – this repeats a task a fixed number of times\nThe “While” loop – this repeats a task until a certain condition is met (which may be never if we don’t write the code correctly, in which case the task will be repeated forever!)\n\nThese processes are fundamental to all computing and lie at the heart of a lot of functions that we have already used. Most of the time we won’t need to explicitly call upon them, as we can use higher level functions like filter or group_by to do what we want, but sometimes we will need to invoke these principles in order to get the job done.\nThis practical is focussed on showing you code for a range of canonical examples and asking you to try to work out what should happen before you run the code. The aim is to give you an opportunity to cement your understanding of how loops work in principle rather going through explicit examples of how you can use them (although we will do at least one of these)."
  },
  {
    "objectID": "materials/loops.html#for-loop-basics",
    "href": "materials/loops.html#for-loop-basics",
    "title": "Loops",
    "section": "For-loop basics",
    "text": "For-loop basics\nThe fundamental structure of a for loop is based on the following syntax:\n\nRPython\n\n\n\nfor(i in i_val){\n  #code to execute\n}\n\n\nThe for loop begins with the word for\nImmediately after for are some bracket ()\nWithin these brackets is a loop variable (here called i but it could be called whatever you want), the word in, and then a loop vector (here called i_val)\nThis is followed by a curly bracket {\nWe then have some lines of code where you can put whatever you want. This is called the body of the loop\nWe finish off with another curly bracket to match the one before }\n\n\n\n\n\n\n\nLoops work by letting the loop variable take every value in the loop vector in turn. Every time it takes a value in the loop variable the code in the loop body is run. Once we have reached the last value in the loop vector we exit the loop and go on with the next line in the code.\n\nExample - basic concept\n\nRPython\n\n\n\nfor(i in 1:10){\n  print(i)\n}\n\nHere the loop variable is i • The loop vector is the integer values 1, 2, 3, 4, …, 10 • When this is run the program will enter the loop and the variable i will be assigned the first value in the loop vector, so in this case i will be 1 • The program will then execute the main body of the loop with i having the value 1, so in this case it will print 1 to the screen. • Once the program gets to the bottom of the main body of the loop it goes back to the top and changes the loop variable to the next value in the loop vector, in this case i now takes the value 2. • We go back into the loop body and re-execute the code, but using the new value of the loop variable. • We keep on repeating this process until the loop variable has taken every single value in the loop vector. So in this case we will repeat the loop 10 times, with i taking each of the values from 1 to 10 in turn • The program then leaves the loop"
  },
  {
    "objectID": "materials/loops.html#exercise",
    "href": "materials/loops.html#exercise",
    "title": "Loops",
    "section": "Exercise",
    "text": "Exercise\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nRPython"
  },
  {
    "objectID": "materials/loops.html#key-points",
    "href": "materials/loops.html#key-points",
    "title": "Loops",
    "section": "Key points",
    "text": "Key points\n\n\n\n\n\n\nNote"
  }
]